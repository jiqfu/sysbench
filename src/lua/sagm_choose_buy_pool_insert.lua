#!/usr/bin/env sysbench
-- Copyright (C) 2006-2017 Alexey Kopytov <akopytov@gmail.com>

-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA

-- ----------------------------------------------------------------------
-- Insert-Only OLTP benchmark
-- ----------------------------------------------------------------------

require("oltp_common")

sysbench.cmdline.commands.prepare = {
    function()
        if (not sysbench.opt.auto_inc) then
            -- Create empty tables on prepare when --auto-inc is off, since IDs
            -- generated on prepare may collide later with values generated by
            -- sysbench.rand.unique()
            sysbench.opt.table_size = 0
        end

        cmd_prepare()
    end,
    sysbench.cmdline.PARALLEL_COMMAND
}

function prepare_statements()
    -- We do not use prepared statements here, but oltp_common.sh expects this
    -- function to be defined
end

function event()
    local auth_list_code_val = get_auth_list_code_value()
    local show_supplier_name_val = get_show_supplier_name_value()
    if (sysbench.opt.auto_inc) then
        i = 0
    else
        -- Convert a uint32_t value to SQL INT
        i = sysbench.rand.unique() - 2147483648
    end
    local sql="INSERT INTO sagm_choose_buy_pool1(auth_list_code, sku_id, show_supplier_name, org_id, price,agreement_type, agreement_header_id, agreement_line_id, shelf_flag, tenant_id, aggregate_id) VALUES";
    for j = 0,99 do
        sql=sql..string.format("('%s',%d,'%s',%d,%d,'PUR_AGREEMENT',%d,%d,%d,%d,%d),",
                auth_list_code_val, sb_rand(1, sysbench.opt.table_size), show_supplier_name_val, sb_rand(1, sysbench.opt.table_size),
                sb_rand(1, sysbench.opt.table_size), sb_rand(1, sysbench.opt.table_size), sb_rand(1, sysbench.opt.table_size), 1, sb_rand(1, sysbench.opt.table_size), -1)
    end
    sql=sql..string.format("('%s',%d,'%s',%d,%d,'PUR_AGREEMENT',%d,%d,%d,%d,%d)",
            auth_list_code_val, sb_rand(1, sysbench.opt.table_size), show_supplier_name_val, sb_rand(1, sysbench.opt.table_size),
            sb_rand(1, sysbench.opt.table_size), sb_rand(1, sysbench.opt.table_size), sb_rand(1, sysbench.opt.table_size), 1, sb_rand(1, sysbench.opt.table_size), -1)
    con:query(sql)
end
